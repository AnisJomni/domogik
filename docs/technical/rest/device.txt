============================
/device - devices management
============================

Available actions : 

* GET : get one or several devices informations
* POST : create a new device
* PUT : update an existing device
* DELETE : delete a existing device


GET
===

This method is used to get informations about existing devices. There are several way to call the **/device** url with the GET method.

/device
-------

All the devices will be returned in a json table. 

Example: ::

    Method : GET
    Url : http://127.0.0.1:40405/device
    Response (application/json) : 
    [
        {
            "client_id": "domogik-aplugin.ahostname",
            "commands": {...},
            "description": "a description",
            "device_type_id": "a.device.type",
            "id": 666,
            "name": "a name for the device"
            "parameters": {...},
            "reference": "a reference",
            "sensors": {...},
            "xpl_commands": {...},
            "xpl_stats": {...},
        },
        { ...}
    ]

* client_id : this is the client (a plugin on a server for example) for which the device has been created.
* commands : the list of the availables commands for the device.
* description : the device description.
* device_type_id : the id of the device type choosen during the device creation. The list of commands and sensors are related to the device type choosen on the device creation.
* id : the device id.
* name : the device name.
* parameters : some parameters which are not related to the device itself. It can be a polling delay for example. In the plugin diskfree, each device has an *interval* parameter which is the time between 2 disk space analysis.
* reference : this data is not really usefull. The user should use it to store the device model or reference. It is only display in *Domogik admin*. 
* sensors : the list of the available sensors for the device
* xpl_commands : the details of the xpl commands data. This is not needed by the user interface developper.
* xpl_stats : the details of the xpl stats data. This is not needed by the user interface developper.

Full example
************

This example come from the *velbus* plugin: ::

    [
        {
            "client_id": "plugin-velbus.darkstar", 
            "commands": {
                "set_level_range": {
                    "id": 1, 
                    "name": "Set to a level", 
                    "parameters": [
                        {
                            "conversion": "from_DT_Scale_to_level", 
                            "data_type": "DT_Scale", 
                            "key": "level"
                        }
                    ], 
                    "return_confirmation": true, 
                    "xpl_command": "set_level_range"
                }
            }, 
            "description": "", 
            "device_type_id": "velbus.dimmer", 
            "id": 2, 
            "name": "Vt", 
            "parameters": {}, 
            "reference": "VMBDME", 
            "sensors": {
                "level_range": {
                    "conversion": "from_level_to_DT_Scaling", 
                    "data_type": "DT_Scaling", 
                    "formula": null, 
                    "id": 4, 
                    "incremental": false, 
                    "last_received": null, 
                    "last_value": null, 
                    "name": "level sensor", 
                    "reference": "level_range"
                }
            }, 
            "xpl_commands": {
                "set_level_range": {
                    "id": 1, 
                    "name": "set_level_range", 
                    "parameters": [
                        {
                            "key": "channel", 
                            "value": "1"
                        }, 
                        {
                            "key": "device", 
                            "value": "1"
                        }
                    ], 
                    "schema": "lighting.basic", 
                    "xpl_stat_ack": "get_level_range"
                }
            }, 
            "xpl_stats": {
                "get_level_range": {
                    "id": 4, 
                    "json_id": "get_level_range", 
                    "name": "get_level_range", 
                    "parameters": {
                        "dynamic": [
                            {
                                "ignore_values": "", 
                                "key": "level", 
                                "sensor_name": "level_range"
                            }
                        ], 
                        "static": [
                            {
                                "key": "channel", 
                                "type": "integer", 
                                "value": "1"
                            }, 
                            {
                                "key": "device", 
                                "type": "integer", 
                                "value": "1"
                            }
                        ]
                    }, 
                    "schema": "lighting.device"
                }
            }
        }, 
        {...}
    ]


    
/device/<device id>
-------------------

The device corresponding to the given id will be returned in a json.

Example: ::

    Method : GET
    Url : http://127.0.0.1:40405/device
    Response (application/json) :
    {
        "client_id": "domogik-aplugin.ahostname",
        "commands": {...},
        "description": "a description",
        "device_type_id": "a.device.type",
        "id": 666,
        "name": "a name for the device"
        "parameters": {...},
        "reference": "a reference",
        "sensors": {...},
        "xpl_commands": {...},
        "xpl_stats": {...},
    }

POST /device
============

This method is used to create a new device.

The created device will be returned as a json structure which is similar to a part of the packages json file.

Example: ::

    Method : POST
    Url : http://127.0.0.1:40405/device
    Headers:
        Content-Type: application/x-www-form-urlencoded
    Body: 
        name=the device name
        client_id=The client id
        description=some description about the device
        reference=some reference about the device
        device_type=the type of the device we want to create (diskfree.disk_usage, ...)
    Response (application/json):
    {
        "client_id": "domogik-aplugin.ahostname",
        "commands": {...},
        "description": "a description",
        "device_type_id": "a.device.type",
        "id": 666,
        "name": "a name for the device"
        "parameters": {...},
        "reference": "a reference",
        "sensors": {...},
        "xpl_commands": {...},
        "xpl_stats": {...},
    }


PUT /device
===========

This method is used to update the basic informations about a device:

* name
* description
* refeence

Any other device information can be updated by other urls.

The updated device will be returned as a json structure which is similar to a part of the packages json file.

Example: ::

    Method : PUT
    Url : http://127.0.0.1:40405/device/<device id>
    Headers:
        Content-Type: application/x-www-form-urlencoded
    Body: 
        name=the device name
        description=some description about the device
        reference=some reference about the device
    Response (application/json):
    {
        "client_id": "domogik-aplugin.ahostname",
        "commands": {...},
        "description": "a description",
        "device_type_id": "a.device.type",
        "id": 666,
        "name": "a name for the device"
        "parameters": {...},
        "reference": "a reference",
        "sensors": {...},
        "xpl_commands": {...},
        "xpl_stats": {...},
    }


DELETE /device
==============

This method is used to delete a device. The device corresponding to the given id will be returned in a json.

Example: ::

    Method : DELETE
    Url : http://127.0.0.1:40405/device/<device id>
    Response (application/json) :
    {
        "client_id": "domogik-aplugin.ahostname",
        "commands": {...},
        "description": "a description",
        "device_type_id": "a.device.type",
        "id": 666,
        "name": "a name for the device"
        "parameters": {...},
        "reference": "a reference",
        "sensors": {...},
        "xpl_commands": {...},
        "xpl_stats": {...},
    }


