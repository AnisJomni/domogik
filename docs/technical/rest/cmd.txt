===============================
/cmd - send commands to devices
===============================

The **/cmd** entry in REST is used by User Interfaces to send commands to devices. 

For a xPL plugin, the translation of the url in a xPL message is done based on the database content (the device feature options) and the *info.json* file of the plugin.

Flow
====
.. actdiag::

    actdiag {
        get -> decode -> lookup -> gxpl -> gxpl2 -> precv -> psend -> xplgw -> lookup2 -> event -> encode -> http -> result

        lane ui {
            label = "User"
            get [label = "http get /cmd"];
            result [label = "http 200"];
        }
        lane rest {
            label = "Rest"
            decode [label = "Decode /cmd"];
            gxpl [label = "Request to generate a xpl-cmnd"]
            encode [label = "receive event"];
            http [label = "generate http response"];
        }
        lane stat {
            label = "XplGw"
            gxpl2 [label = "generate and send xpl-cmnd"]
            xplgw [label = "lookup sensor and device"];
            event [label = "generate device event"];
        }
        lane db {
            label = "Database"
            lookup [label = "get command params from db"];
            lookup2 [label = "get sensor params from db"];
        }
        lane plugin {
            label = "Plugin"
            precv [label = "receive xpl-cmnd"];
            psend [label = "send out xpl-trig or xpl-stat"];
        }
    }

Developper notes 
================

Url description
---------------

::

    http://ip:port/cmd/<command id>?<key1>=<value1>&<key2>=<value2>&...

The goal is to be able to generate a xpl message based on a simple url.

The url is formatted like this :

* the first param is command id, this is a defined command in the DB
* the options are corresponding to the parameters of the command, for example the status to apply to a light (on, off) or the dim level to apply to the light. The values that can be used for a device feature are related to the device feature data type.

Example
-------

The folowiong data is in the DB:

Device
++++++

::
    
    id = 1
    name = test
    usage = ventilation
    type = x10.relay

Commands
++++++++

::
    
    id = 10
    name = command1
    xpl_command_id = 12

Command params
++++++++++++++

::
    
    id = 11
    key = level

Xpl command
+++++++++++

::
    
    id = 12
    device = 1
    schema = lighting.device

Xpl command param 
+++++++++++++++++

::

    command = 12
    key = address
    value = 12

Now if we call the '/cmd/10/level/100 we will generate the folowing xpl command: ::
    
    lighting.device {
        level = 100
        address = 12
    }

This example demonstrates how the url can generate any type of xpl message, the number of command params or xpl command params is unlimited.

The commands are dynamic parameters and need to be sent via the url, the xpl command params are staticly defined, these definitions are done during device creation and are not changeable afterwards.


How UI will get status of device ?
==================================

REST only send http code as response. If http code = 200, then the user interface should request REST to get the last sensor value.
To get (for example), the level of a dimmable device after a "+10" increasing command, UI will use **/sensor** url to get the last value.
