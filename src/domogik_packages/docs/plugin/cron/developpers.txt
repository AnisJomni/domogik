===========
Developpers
===========

The cron plugin also contains a client library : cron_query.
It allows you to manipulate cron jobs directly in your plugin.
That can be usefull if you want to add a time line or implement a time based state machine

A job is persistent : it will save its full state when stopping/starting
the cron plugin.

Add a cron job
==============

1) Import the library in you plugin

.. code-block:: none

    from domogik.xpl.lib.cron_query import cronQuery

2) Initialize the class

.. code-block:: none

    self._cronQuery = cronQuery(self.myxpl,self.log)

3) Create the message you want to receive. Your plugin must "listen" for this message.

.. code-block:: none

    nstMess = XplMessage()
    nstMess.set_type("xpl-trig")
    nstMess.set_schema("scene.basic")
    nstMess.add_data({"hello" : "world"})
    nstMess.add_data({"mystatus" :  "Ok"})

4) And create the cron job

.. code-block:: none

    ret = self._cronQuery.start_timer_job(self, device, nstmess, frequence, duration=0)

Where :

- device : the name of the cron job. No domogik device is created when using the cron query.

- nstMess : the previous message.

- frequence : the number of seconds between message

- duration : the number of heart beats. After that you must stop/resume the job to enable it.

5) Manage the job

Stop a job. You can resume a job after stopping it.

.. code-block:: none

        ret = self._cronQuery.stop_job(device,'state')


Resume a job. You can resume a stopped job.

.. code-block:: none

        ret = self._cronQuery.resume_job(device,'state')


You can retrieve the state of a job using the following command. It returns "started","stopped" and "halted".

.. code-block:: none

        ret = self._cronQuery.resume_job(device,'state')


You can kill (and delete) it using :

.. code-block:: none

        ret = self._cronQuery.halt_job(device,'state')


A robust way to use cron jobs is always halt a job before create it.

.. code-block:: none

        ret = self._cronQuery.halt_job(device,'state')
        ret = self._cronQuery.start_timer_job(self, device, nstmess, frequence, duration=0)


6) At last, update your listener to trap the nstMessage defined previously.

You can also create many other types of job, look at the `cron_query <cron_query.html>`_ source and documentation.

Update your plugin __init__
===========================
Sometimes, it's necessary that the cron plugin is started before your plugin.
Actually, there is no way to do it using the dependencies.
The best way to do it, is to add the following script to the constructor of your plugin.
It will try safely to talk to the cron plugin. If it can't, it will stop your plugin.

.. code-block:: none

        #We try to speak to the cron plugin every 30 seconds
        delay_cron = 30
        #We will try to speak 4 times to the cron plugin
        cont = 3
        cron = CronQuery(self.myxpl, self.log)
        cron_started = False
        while not self.get_stop().isSet() and cont>=0:
            try :
                res = cron.is_running_server()
            except :
                pass
            if res :
                cron_started = True
                cont = -1
            else:
                self.log.debug("Can't talk to cron plugin. Retries=%s" % cont)
                self.get_stop().wait(delay_cron)
                cont -= 1
        if not cron_started :
            self.force_leave()
            error = "Can't talk to cron plugin. Exiting ..."
            self.log.error("__init__ : "+error)
            return
        else :
            self.log.info("Communication with the cron plugin established.")


Develop an UI admin page
========================

A javascript library is available to help you in validating user input.
You can use it adding :

.. code-block:: none

    <script type="text/javascript" src="{{ static_design_url}}/admin/js/page-admin-cron.js"></script>

Here is a way to use it to validate a day of week field : MoTuWe...

.. code-block:: none

     if ((days == null) || (days == "") || (check_days_of_week(days) != true)) {
         $("#alarmdays"+i).focus();
         $.notification('error', "{% trans "Bad syntax" %}");
         return
     }

Look at cron UI html sources for more examples.

Index of UI functions
=====================

function plugin_is_running() {
    // Check that the plugin is running

function check_job_name(name) {
    // Check that the job name is valid

function check_days_of_week(dow) {
    // Check that the days_of_week is correct : MoTuWeThFrSaSu

function check_dow_overlapped(dow1,dow2) {
    // Check that 2 days_of_week doesn't overlappes : ie MoTuWeThFrSaSu and Mo

function check_number(num) {
    // Check that a number is valid

function check_dim_levels(levels) {
    // Check that the dim levels are valid : 10,20,30,...

function check_time(hour) {
    // Check that a time is valid : 10:30 or 8:00

function check_xpldate(date) {
    // Check that an xpldate is valid : 20121201203000

function check_year(year) {
    // Check that a year is valid : 2012

function check_month(year,month) {
    // Check that a year/month is valid : 2012,1-12

function check_day(year,month,day) {
    // Check that a year/month/day is valid : 2012,1-12,0-(28,29,30,31)

function check_hour(hour) {
    // Check that a hour is valid : 0..23

function check_minute(minute) {
    // Check that a minute is valid : 0..59

function check_second(second) {
    // Check that a second is valid : 0..59

About the new device interface
==============================

A new implementation of the device db model is updated : http://wiki.domogik.org/Spec_xplFromDb
A side effect is that command use typed fields as parameters.
So it's impossible to encapsulate anymore

Here is a proposal for the new model :

.. code-block:: none

    {
        "reference": "start_job_date",
        "schema": "timer.basic",
        "parameters": [
            {
                "static": [
                    {
                        "key": "devicetype",
                        "value": "date",
                    },
                 ],
                 "device": [
                    {
                         "key": "device",
                         "description": "The job name",
                         "type": "string",
                    },
                ],
                "dynamic": [
                    {
                         "key": "date",
                         "description": "The event date (YYYYMMDDHHMMSS)",
                         "type": "string",
                    },
                    {
                         "key": "date[0..]",
                         "description": "The event date (YYYYMMDDHHMMSS)",
                         "type": "string",
                    },
                ],
                "feature": []
            }
        ]
     },
    {
        "reference": "start_job_interval",
        "schema": "timer.basic",
        "parameters": [
            {
                "static": [
                    {
                        "key": "devicetype",
                        "value": "interval",
                    },
                 ],
                 "device": [
                    {
                         "key": "device",
                         "description": "The job name",
                         "type": "string",
                    },
                ],
                "dynamic": [
                    {
                         "key": "weeks",
                         "description": "Every X weeks",
                         "type": "integer",
                    },
                    {
                         "key": "days",
                         "description": "Every X days",
                         "type": "integer",
                    },
                    {
                         "key": "hours",
                         "description": "Every X hours",
                         "type": "integer",
                    },

                ....

                ],
                "feature": []
            }
        ]
     },
