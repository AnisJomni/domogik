=============================
Pub/sub detailed informations
=============================


plugin.configuration
====================

Publisher: 
* all Domogik plugins

Subscriber: any member who wants to be aware of the plugins configuration updates
* manager
* UIs

When a plugin configuration is updated (add, delete, update actions), the dbmgr published over the MQ a message.

An example to catch these messages is available as *src/domogik/examples/mq-python/sub_plugin_configuration.py*.

You will get messages like this: ::

     id = plugin.configuration.1372234803_28.0_1 - content = {"host": "darkstar", "type": "plugin", "id": "diskfree", "event": "updated"}

The only *event* value is *updated*.

In the *manager*, a *Plugin* object is created for each plugin detected (on the file system). In each of these objects, a subscription is made to the *plugin.configuration* category and when a message is catched, if *type == 'plugin' and id == <plugin id> and host = <hostname>* then the plugin configuration in database is reloaded (in order the *clients.detail* message to be updated)


plugin.status
=============

Publisher: 
* all Domogik plugins

Subscriber: any member who wants to be aware of the plugins status
* manager
* UIs

Each domogik plugin sends over the MQ its status. The manager subscribe to the category *plugin* to get the plugin status in real time.

For example, on plugin startup (see XplPlugin.__init__()), a plugin sends the *STATUS_STARTING* (*starting* value): ::

    self._pub.send_event('plugin.status',
                         {"type" : "plugin",
                          "id" : self._name,
                          "host" : self.get_sanitized_hostname(),
                          "event" : STATUS_STARTING})

An example to catch these messages is available as *src/domogik/examples/mq-python/sub_plugin_status.py*.

You will get messages like this: ::

    id = plugin.status.1371476851_54.0_1 - content = {"host": "darkstar", "type": "plugin", "id": "diskfree", "event": "alive"}

Find here `:doc:the full list of available status.</technical/plugins/index>`

In the *manager*, a *Plugin* object is created for each plugin detected (on the file system). In each of these objects, a subscription is made to the *plugin.status* category and when a message is catched, if *type == 'plugin' and id == <plugin id>* then the plugin status is set to the catched value.


clients.list
============

Publisher: 
* manager

Subscriber: any member who wants to be aware of the clients (plugins, ...) list
* UIs

The manager publishes over the MQ the clients list when there is something new.

An example to catch these messages is available as *src/domogik/examples/mq-python/sub_clients_list.py*.

You will get messages like this: ::

    id = clients.list.1371478478_22.0_1 - content = {"domogik-diskfree.darkstar": {"status": "alive", "configured": true, "pid": 0, "host": "darkstar", "type": "plugin", "id": "diskfree"}}

clients.detail
==============

Publisher: 
* manager

Subscriber: any member who wants to be aware of the clients (plugins, ...) detail
* UIs

The manager publishes over the MQ the clients detail when there is something new.

Notice that the cliens detail include the clients list.

An example to catch these messages is available as *src/domogik/examples/mq-python/sub_clients_detail.py*.

You will get messages like this: ::

    id = clients.detail.1371478534_97.0_1 - content = {"domogik-diskfree.darkstar": {"status": "alive", "data": {"xpl_stats": {"get_total_space": {"name": "get_total_space", "parameters": {"device": [], "dynamic": [{"ignore_values": "", "sensor": "get_total_space", "key": "current"}], "static": [{"value":"total_space", "key": "type"}]}, "schema": "sensor.basic"}, "get_free_space": {"name": "get_free_space", "parameters":{"device": [], "dynamic": [{"ignore_values": "", "sensor": "get_free_space", "key": "current"}], "static": [{"value": "free_space", "key": "type"}]}, "schema": "sensor.basic"}, "get_used_space": {"name": "get_used_space", "parameters": {"device": [], "dynamic": [{"ignore_values": "", "sensor": "get_used_space", "key": "current"}], "static": [{"value": "used_space", "key": "type"}]}, "schema": "sensor.basic"}}, "commands": [], "udev-rules": [], "device_types": {"diskfree.disk_usage": {"commands": [], "description": "Disk usage", "xpl_params": [{"type": "string", "description": "The path to lookat", "key": "device"}], "sensors": ["get_total_space", "get_percent_used", "get_free_space", "get_used_space"], "id": "diskfree.disk_usage", "name": "Disk usage"}}, "xpl_commands": [], "sensors": {"get_total_space": {"conversion": "", "name": "Total Space", "data_type": "DT_Scaling"}, "get_free_space": {"conversion": "", "name": "Free Space", "data_type": "DT_Scaling"}, "get_used_space": {"conversion": "", "name": "Used Space", "data_type": "DT_Scaling"}, "get_percent_used":{"conversion": "", "name": "Percent used", "data_type": "DT_Scaling"}}, "configuration": [{"description": "Automatically start plugin at Domogik startup", "default": "False", "options": [], "key": "startup-plugin", "interface": "no", "optionnal": "no", "type": "boolean", "id": "0"}, {"description": "Interval between each poll (minute)", "default": null, "options": [], "key": "interval", "interface": "no", "optionnal": "no", "type": "string", "id": "1"}, {"description": "Path on filesystem", "default": null, "options": [], "key": "path", "interface": "yes", "optionnal": "no", "type": "string", "id": "2"}], "identity": {"category": "computer", "documentation": "http://wiki.domogik.org/plugin_diskfree", "description": "Send over xPL disk usage", "changelog": "0.1\n- plugin creation", "author_email": "fritz.smh at gmail.com", "author": "Fritz", "domogik_min_version": "0.2.0", "icon_file": "/var/lib/domogik/packages/plugin_diskfree/design/icon.png", "dependencies": [], "version": "0.1a0", "fullname": "plugin-diskfree", "type": "plugin", "id": "diskfree"}, "json_version": 2}, "configured": true, "pid": 0, "host": "darkstar", "type": "plugin", "id": "diskfree"}}



