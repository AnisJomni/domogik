=============
REST /account
=============

**/account** entry allow to manage all account-linked features : login, password updating, user and persons management.
A user is a logical account wich allows to acces to Domogik features. A person is a physical people. A user can be linked to a person.

Authenticate
============

GET /account/auth/<login>/<password>
------------------------------------
Try to login as <login> with password <password>
When authentication is ok reply is: ::
    
    {"status" : "OK", "code" : 0, "description" : "Access granted"}

Else, if wrong login or password: ::

    {"status" : "ERROR", "code" : 999, "description" : "Access refused"}

Users
=====

/account/user/password/id/<id>/old/<old password>/new/<new password>
--------------------------------------------------------------------
Change the password from <old_password> to <new_password> for user id <id>

GET /account/user/
------------------
List all user accounts

Result: ::

    {
        "status" : "OK",
        "code" : 0,
        "description" : "None",
        "account" : [
            {
                "skin_used" : "",
                "person" : {
                    "last_name" : "Admin",
                    "first_name" : "Admin",
                    "id" : 1,
                    "birthdate" : "1900-01-01"
                },
                "is_admin" : "True",
                "person_id" : 1,
                "login" : "admin",
                "id" : 1
            }
        ]
    }

/account/user/list/by-id/<id>
-----------------------------
Result : same as /list with only the user associated to the id

POST /account/user/
------------------
Add user account + person (if needed)

HTTP content (for only adding account):
    * login
    * password
    * is_admin
    * skin_used
    * person_id

HTTP content (for account and person):
    * login
    * password
    * is_admin
    * skin_used
    * first_name
    * last_name
    * birthday (optional)

Result : same as /list with only the user added

PUT /account/user/
-------------------------
Update account + person 

HTTP content (passed parameters are updated):
    * login
    * password
    * is_admin
    * skin_used
    * first_name
    * last_name
    * birthday

Result : same as /list with only the user updated

DELETE /account/user/
---------------------
Del account (user account only) 

HTTP content:
    * id

Result : same as /list with only the user deleted

Persons 
=======

GET /account/person/
--------------------
List all persons

Result: ::

    {
        "status" : "OK",
        "code" : 0,
        "description" : "None",
        "person" : [
            {
                "last_name" : "Admin",
                "first_name" : "Admin",
                "id" : 1,
                "birthdate" : "1900-01-01"
            }
        ]
    }

/account/person/list/by-id/<id>
-------------------------------
Result : same as /list with only the person filtered

PUT /account/person/
--------------------
Add a person

HTTP content:
    * first_name
    * last_name
    * birthday (optional)

Result : same as /list with only the person added

POST /account/person/
---------------------
Update person

HTTP content:
    * id
    * first_name
    * last_name
    * birthday (optional)

Result : same as /list with only the person updated

DELETE /account/person/
-----------------------
Del person (and user account linked if it exists) 

HTTP content:
    * id

Result : same as /list with only the person deleted
