================
Testing a plugin
================

Testing a plugin is really important! This allow to:
* check if the plugin works as designed
* check if the last update didn't break anything: this is called *non regression tests*

Some libraries have been created in the Domogik project to help you to create the test scripts. These libraries can:
* create some devices
* configure, start, stop and do some basic checks on the plugin
* help you to test xPL dialogs

**Be carefull : executing the tests may delete your existing devices and so you can loose some data!!!!**

File tree
=========

The following files are mandatory for the tests: ::

    tests/
      # the 0* files are just helpers for the developpers
      001_configure.py     # this python file is used by the developpers to quickly configure the plugin 
      002_create_device.py # this python file is used by the developpers to quickly create some test devices

      # all the other files are related to the plugin tests
      tests.json          # this is a file which describe all the test files. It is used for tests automation

Then, depending on your plugin, you can have only one test file: ::

    tests/
      ..
      tests.py

Or several files: ::

    tests/
      ..
      test_feature_A.py
      test_feature_B.py
      test_feature_C.py


tests.json 
==========

This file is very important! It will be used by :doc:`the testrunner.py tool <testrunner>`. 

Example: ::
    
    {
        "tests" : {
            "alter_configuration_or_setup" : true,
            "need_hardware" : false,
            "criticity" : "high"
        }
    }

* alter_configuration_or_setup: *true* if the test need to alter the plugin configuration or some devices. The test should not be run on a production environment! *false* if the test doesn't alter anything and can be run safely on a production environment.
* need_hardware: *true* if some hardware is needed by the test. Please note that :doc:`the testrunner.py tool <testrunner>` will never run the tests that need some hardware.
* criticity: *high*, *medium* or *low*.

Each test file must be listed in the *tests.json* file.

A test file
===========

A test file is made of 2 parts:
* a class which inherits from *PluginTestCase*. This class will contain all the test cases related to the plugin.
* the main part which will do some actions and launch the test cases.

Here are the actions that can be done in the main part:
* if needed, define some global variables (polling interval, ...). Example: ::

    if __name__ == "__main__":
        ### global variables
        interval = 1
        path = "/home"

* set up the xpl features for the test file. A *XplPlugin* instance will be created with some special parameters (please always use these parameters, even the generic name). Example: ::

        # set up the xpl features
        xpl_plugin = XplPlugin(name = 'test',
                               daemonize = False,
                               parser = None,
                               nohub = True,
                               test  = True)

 
