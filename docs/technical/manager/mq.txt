==================
Manager MQ dialogs
==================

Plugins (pub) => Manager (sub)
==============================

Each domogik plugin sends over the MQ its status. The manager subscribe to the category *plugin* to get the plugin status in real time.

For example, on plugin startup (see XplPlugin.__init__()), a plugin sends the *STATUS_STARTING* (*starting* value): ::

    self._pub.send_event('plugin',
                         {"type" : "plugin",
                          "id" : self._name,
                          "event" : STATUS_STARTING})

To catch this messages, you can do: ::

    import zmq
    from domogik.mq.pubsub.subscriber import MQAsyncSub
    from zmq.eventloop.ioloop import IOLoop
    from domogik.mq.message import MQMessage
    
    class Test(MQAsyncSub):
    
        def __init__(self):
            MQAsyncSub.__init__(self, zmq.Context(), 'test', ['plugin'])
            IOLoop.instance().start()
    
        def on_message(self, msgid, content):
            print("New pub message {0}".format(msgid))
            print("{0}".format(content))
    
    if __name__ == "__main__":
        Test()

You will get messages like this: ::

    id = clients.list.1371071554_16.0_1 - content = {"domogik-diskfree.darkstar": {"status": "unknown", "host": "darkstar", "type": "plugin", "id": "diskfree", "configured": null}}

All these status are availble:

* STATUS_STARTING
* STATUS_ALIVE
* STATUS_STOPPED
* STATUS_DEAD
* STATUS_UKNOWN

To get the associated values, please check in Domogik sources : *src/domogik/xpl/common/plugin.py*

In the *manager*, a *Plugin* object is created for each plugin detected (on the file system). In each of these objects, a subscription is made to the *plugin* category and when a message is catched, if *type == 'plugin' and id == <plugin id>* then the plugin status is set to the catched value.


Plugins (pub) => User interfaces (sub)
======================================

The UI may subscribe in the same way than the manager to the *plugin* category and update the plugin status by catching the messages from this category.



UI (req) => Manager (rep)
=========================

Clients list
------------

To get the clients list, the UI may send a MQ request *clients.list.get* to the manager. Example: ::

    import zmq
    from zmq.eventloop.ioloop import IOLoop
    from domogik.mq.reqrep.client import MQSyncReq
    from domogik.mq.message import MQMessage
    
    cli = MQSyncReq(zmq.Context())
    msg = MQMessage()
    msg._action = 'clients.list.get'
    print cli.request('manager', msg.get(), timeout=10)

The result will be like this: ::

    <MQMessage(action=clients.list.result, data='{u'clients': {u'domogik-diskfree.darkstar': {u'status': u'stopped', u'host': u'darkstar', u'type': u'plugin', u'id': u'diskfree', u'configured': None}}}')>


The UI may use this MQ request only on startup or when it needs to initiate the values. To get updates, the UI should subscribe to the appropriate MQ publisher.

Clients details
---------------

To get the clients details, the UI may send a MQ request *clients.detail.get* to the manager. Example: ::

    import zmq
    from zmq.eventloop.ioloop import IOLoop
    from domogik.mq.reqrep.client import MQSyncReq
    from domogik.mq.message import MQMessage
    
    cli = MQSyncReq(zmq.Context())
    msg = MQMessage()
    msg._action = 'clients.detail.get'
    print cli.request('manager', msg.get(), timeout=10)

the result will be like this: ::

    <MQMessage(action=clients.detail.result, data='{u'clients': {u'domogik-diskfree.darkstar': {u'status': u'unknown', u'type': u'plugin', u'configured': None, u'host': u'darkstar', u'data': {}, u'id': u'diskfree'}}}')>

Notice that in this example, the *data* element is empty. In the reality, it contains all the plugin informations (for a plugin).

Manager (pub) => UI (sub)
=========================

Each time the *Clients* object is updated, 2 messages are published over the MQ.

Clients list
------------

The message is sent with the category *clients.list*. It contains the same data as the *clients.list.get* MQ reply.

Clients details
---------------

The message is sent with the category *clients.detail*. It contains the same data as the *clients.detail.get* MQ reply.

How to grab these messages
--------------------------

Here is the example to grab both *clients.list* and *clients.detail*: ::

    import zmq
    from domogik.mq.pubsub.subscriber import MQAsyncSub
    from zmq.eventloop.ioloop import IOLoop
    from domogik.mq.message import MQMessage
    
    class Test(MQAsyncSub):
    
        def __init__(self):
            MQAsyncSub.__init__(self, zmq.Context(), 'test', ['clients.list'])
            IOLoop.instance().start()
    
        def on_message(self, msgid, content):
            print("New pub message {0}".format(msgid))
            print("{0}".format(content))
    
    if __name__ == "__main__":
        Test()

You will get messages like this: ::

    id = clients.list.1371071844_17.0_1 - content = {"domogik-diskfree.darkstar": {"status": "stopped", "host": "darkstar", "type": "plugin", "id": "diskfree", "configured": null}}

    id = clients.detail.1371071844_17.0_1 - content = {"domogik-diskfree.darkstar": {"status": "unknown", "type": "plugin", "configured": null, "host": "darkstar", "data": {}, "id": "diskfree"}}




