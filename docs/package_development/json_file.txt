=================
Package json file
=================
.. warning ::
   This docmentation is only valid for json version 2 and up

.. |yes| image:: yes.png
.. |no|  image:: no.png

Purpose
=======
The Json file describe the package and the features of the package. There is one common part which is the same for all packages type and some optionnal parts that depends on the package type.

.. warning ::
   In json, you must write *\\n* each time you want to create a newline in the data.

The common part
===============

========================================== ======= =========
Package type :                             Plugin  External 
========================================== ======= =========
**Is section required for package type :** |yes|   |yes|
========================================== ======= =========

The common part is like this : 

Example
-------

::

    {
        "json_version": 2,
        "identity": {
            "type": "plugin",
            "id": "onwire",
            "category": "onewire",
            "version": "0.1",
            "domogik_min_version": "0.2.0",
            "documentation": 'http://wiki.domogik.org/plugin_onewire',
            "description": 'Manage 1-wire devices...',
            "author": 'Domogik',
            "author_email": 'xx@xxx.fr',
            "changelog" : "0.1\n-Create plugin",
            "dependencies": [
                {  
                    "id": "owfs (>=2.8.4)",
                    "type": "other"
                }
            ],
         },
        "files": [
            "src/share/domogik/design/plugin/onewire/icon.png",
            "src/share/domogik/plugins/onewire.json",
            ...
        ],
    }

Description
-----------

* json_version : version of the json file for this particular element type.

  * identity : element identity.

    * type : the type id for the element:

      * plugin.
      * external.

    * id : package id (name).
    * category : package category (for a plugin, it will be its technology).
    * version : package version.
    * domogik_min_version : minimum Domogik version required by the package.
    * description : package description.
    * author : Name or surname of the developper.
    * author_email : email the developper.
    * documentation : link to the specification page.
    * changelog : changelog. For each version you must indicate the fixes/upgrades.
    * dependencies : table of dependencies needed by the package :

      * type : type of the dependency

        python : a python dependency (distutils2 format). Ex : 'pyserial (>=2.5)', 'foo (>1.0, <1.8)', ...

        plugin : a Domogik plugin dependency : another plugin must run in order this one could be functionnal.

        other : another dependency (example : owfs for onewire, which need a manual installation).

  * files : list of the files included in the package.

Optionnal parts
===============
You must add the following parts in the json file when developping a package.

Technology
----------

========================================== ======= =========
Package type :                             Plugin  External 
========================================== ======= =========
**Is section required for package type :** |yes|   |yes|
========================================== ======= =========

Example
*******
::

        "technology": {
            "description": "1-wire",
            "id": "onewire",
            "name": "1-wire"
        },

Description
***********
These data will be inserted in database during the package installation.

* technology : description of the package technology

  * id : technilogy id.
  * name : tehcnology name.
  * description : short description of the technology.


Device types
------------

========================================== ======= =========
Package type :                             Plugin  External 
========================================== ======= =========
**Is section required for package type :** |yes|   |yes|
========================================== ======= =========

Example
*******
::

        "device_types": [
            {
                "description": "Thermometer",
                "id": "onewire.thermometer",
                "name": "Thermometer"
            },
            ...
        ]

Description
***********
These data will be inserted in database during the package installation.

* device_types : list of the device types allowed by the package

  * id : device type id
  * name : device type name
  * description :  short description of the device type


Device feature models
---------------------

========================================== ======= =========
Package type :                             Plugin  External 
========================================== ======= =========
**Is section required for package type :** |yes|   |yes|
========================================== ======= =========

Example
*******
::
        "device_feature_models": [
        {
            "device_type_id": "velbus.relay",
            "feature_type": "actuator",
            "id": "velbus.relay.switch",
            "name": "Switch",
            "stat_key": "level",
            "value_type": "binary",
            "xpl_command": "setlevel",
            "value_field": "level",
            "values": [0, 255]
        },
        ]

Description
***********
These data will be inserted in database during the package installation.

* device_feature_models : list of the device features models allowed by the package

  * device_type_id : device type to which the model is related to.
  * id : device feature model id
  * name : name of the device feature model.
  * feature_type : *sensor* or *actuator* : type of the feature.
  * stat_key : associated stat key in database (this is related to the key defined in :doc:`the stat files <stats_files>`.
  * value_type : *number*, *string*, *boolean*, *binary*. The type of the value.
  * xpl_command : a reference to an xpl_command (only neede for actuator)
  * value_field : a reference to a dynamic value inside the xpl command (only neede for actuator)
  * values : a list of values that can be used for the value_field, this value is moslty used if value_type is set to binary (only neede for actuator)
  * unit : a display string (only neede for sensor)

Configuration elements
----------------------

========================================== ======= =========
Package type :                             Plugin  External 
========================================== ======= =========
**Is section required for package type :** |yes|   |no|
========================================== ======= =========

These data are read by the manager.

Example
*******
::

        "configuration": [
            {  
                "id": "0",
                "interface": "no",
                "key": "startup-plugin",
                "type": "boolean",
                "options": [],
                "default": "False",
                "description": "Automatically start plugin at Domogik startup",
                "optionnal": "no",
            },
            ...
        ]

Description
***********

* configuration : list of the configuration parameters of a plugin

  * id : number of the configuration item. The display order will be related to the id.
  * interface : *yes* or *no*. If *yes*, group with all the following keys with *interface = yes*. This group of keys allow to configure N iterations of these keys. 
  * type : the type of the value to set for the key. 

    * string : the default type
    * number : a number
    * boolean : True, False
    * enum : a list of options. Example: ::

        "type" : "enum",
        "options": [
            "ipx800v1",
            "ipx800pro",
            "ipx800v2",
            "ipx800v3"
        ],


  * options : if *type = enum*, list the available options in this table.
  * default : suggested value.
  * description : parameter short description.
  * optionnal : *yes* or *no* : is the parameter optionnal or not ? It is used only for notification in the user interface.


.. todo:: 
    detail enum


Udev rules
----------

========================================== ======= =========
Package type :                             Plugin  External 
========================================== ======= =========
**Is section required for package type :** |yes|   |no|
========================================== ======= =========

Example
*******
::

        "udev-rules": [
            {  
                "description": "Usb DS9490R adaptator",
                "filename": "onewire.rules",
                "model": "DS9490R",
                "rule": "SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"04fa\", ATTRS{idProduct}==\"2490\", SYMLINK+=\"onewire\", MODE=\"0666\""
            }
        ]

Description
***********

* udev-rules : list of the suggested udev rules.
  * description : short desciption of the rule. Indicate the related device model here.
  * filename : suggested filename to use for the rule.
  * model : related device model.
  * rule : the udev rule.





External members identification
-------------------------------

========================================== ======= =========
Package type :                             Plugin  External 
========================================== ======= =========
**Is section required for package type :** |no|    |yes|
========================================== ======= =========

Example
*******
::

        "external": {
            "device_id": "rgb",
            "vendor_id": "arduino"
        },

Description
***********

* external : description of the vendor and device id of the external member. This is used to identify a specific external member model.
  * device_id : device id.
  * vendor_id : vendor id.

Xpl commands
-------------------------------

========================================== ======= =========
Package type :                             Plugin  External 
========================================== ======= =========
**Is section required for package type :** |yes|    |yes|
========================================== ======= =========

Example
*******
::
    "xpl_commands": [
         {
            "reference": "set_level",
            "schema": "lighting.basic",
            "parameters": [
                {
                    "static": [
                        {
                            "key": "foo",
                            "value": "bar"
                        }
                    ],
                    "device": [
                        {
                            "key": "channel",
                            "description": "The channel number",
                            "type": "integer",
                            "max_value": 4,
                            "min_value": 1
                        },
                        {
                            "key": "address",
                            "description": "The decimal address",
                            "type": "integer",
                            "max_value": 255,
                            "min_value": 0
                        }
                    ],
                    "dynamic": [
                        {
                            "key": "level",
                            "type": "integer",
                            "max_value": 255,
                            "min_value": 0
                        }
                    ]
                }
            ]
         }
         ...
    ],

Description
***********

* xpl_commands/xpl_stats : this section describes the xpl messages to sent on the netwerk
  * reference : the name of this command, its the same name as the device_feature_model xpl_command value
  * schema : the xpl_schema to use
  * xpl_stat : the coresponding xpl response (only needed in xpl_commands)
  * parameters : the parameters needed for this command, there are 3 types of parameters
    * static : a static parameter, this only has a key and a value, this parameter is always inside the xpl message with the same value
      * key : the key inside the xpl message
      * value : the value for the key
    * device : a parameter defined on device creation (example address)
      * key : the key inside the xpl message
      * value : the value for the key
      * description : some info to display on the 'add device interface'
      * type : used to validate the input
      * min_value : used to validate the input
      * max_value : used to validate the input
    * dynamic : a parameter that needs to be filled in on xpl message sending, example the level of a dimmer 

How to insert the data in database
==================================

*This action is only for developpers!*

If you want to manually insert the data of the json in the database, launch this command : ::

    cd src/tools/packages
    ./insert_data.py ../../share/domogik/plugins/<your plugin name>.json

